#General notes
#Help functions
help("summary.tree")
help.start()
help.search("expression")
example("function")

#Topic 1
#data reading/writing
#E1 - Create data frame birth by reading birthstatistics.csv into R and by using read.csv. Note that these data has headers.
df = read.csv("birthstatistics.csv")

#E2 - Create data frame blog by reading blogData_test.csv into R and by using read.csv. Note that headers (column names) are missing.
blog = read.csv("blogData_test.csv", header = FALSE)

#E3 - Create data frame tecator by reading tecator.xls into R by using readxl package.
library(readxl)
data = read_excel("tecator.xls")

#E4 - Save tecator to tecator.csv with write.csv and make sure that row names are not saved
write.csv(data, file="tecator.csv", row.names = FALSE)

#Basic data manipulation
#E1 - Convert tecator to a data frame and call it tecator1
tecator1 = as.data.frame(data)

#E2 - Change row names in tecator1 to the values of Sample column plus 10
rownames(tecator1) = tecator1$Sample + 10

#E3 - Change column name in tecator1 from Sample to ID
colnames(tecator1)[1] ="ID"

#E4 - Extract rows in tecator1 such that Channel1 > 3 and Channel2 > 3 and columns between number 5 and number 8
tecator1[tecator1$Channel1 > 3 & tecator1$Channel2 > 3, 5:8]

#E5 - Remove column ID in tecator1 (two options)
tecator1$ID=c()
tecator1 = tecator1[, -1]

#E6 - Update tecator1 by dividing its all Channel columns with their respective means per column (two options)
for (i in 2:100) { # my solution
  # Assuming the channel columns are named as "Channel1", "Channel2", ..., "Channel100"
  channel_col_name = paste("Channel", i, sep="")
  # Calculate the mean of the i-th Channel column
  divider = mean(tecator1[[channel_col_name]])
  # Divide the i-th Channel column by its mean
  tecator1[[channel_col_name]] = tecator1[[channel_col_name]] / divider
}

library(stringr) #Olegs
index=str_which(colnames(tecator1), "Channel")
tecatorChannel=tecator1[,index]
means=colMeans(tecatorChannel)
tecator1[,index]=tecator1[,index]/matrix(means, nrow=nrow(tecatorChannel), ncol=ncol(tecatorChannel), byrow=TRUE)

#E7 - Compute a sum of squares for each row between 1 and 5 in tecator1 without writing loops and make it as a matrix with one column
#My solution
m = matrix(c(rowSums(tecator1[1,]^2), rowSums(tecator1[2,]^2), rowSums(tecator1[3,]^2), rowSums(tecator1[4,]^2), rowSums(tecator1[5,]^2)), nrow = 5, ncol = 1)
print(m)

#Olegs
sumsq=apply(tecator1[1:5,], MARGIN = 1, FUN=function(x) return(sum(x^2)) )
tecator2=matrix(sumsq, ncol=1)

#E8 - Extract X as all columns except of columns 101-103 in tecator1, y as column Fat and compute (XTX)−1XTy
#My solution
X = as.matrix(tecator1[,1:100])
y = as.matrix(tecator1[,101])
res=solve(t(X)%*%X)%*%t(X)%*%y

#Olegs
X=as.matrix(tecator1[,-c(101, 102, 103)]) #can be written more efficiently as -(101:103)
y=as.matrix(tecator1[,"Fat", drop=F]) #keep it as a matrix, don't reduce dimension.
result=solve(t(X)%*%X, t(X)%*%y)

#E9 - Use column Channel1 in tecator1 to compute new column ChannelX which is a factor with the following levels: “high” if Channel1>1 and “low” otherwise
tecator1$ChannelX=as.factor(ifelse(tecator1$Channel1>1), "high", "low")

#E10 - Write a for loop that computes regressions Fat as function of Channeli,i=1,...100 and then stores the intercepts into vector Intercepts. Print Intercepts.
#E11 - Given equation y=5x+1, plot this dependence for x between 1 and 3


